def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board):
    win_conditions = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[2][0], board[1][1], board[0][2]]
    ]
    for line in win_conditions:
        if line[0] == line[1] == line[2] and line[0] != ' ':
            return line[0]
    return None

def get_empty_positions(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == ' ']

def minimax(board, depth, alpha, beta, is_maximizing):
    winner = check_winner(board)
    if winner == 'X':
        return 1
    elif winner == 'O':
        return -1
    elif not get_empty_positions(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for (r, c) in get_empty_positions(board):
            board[r][c] = 'X'
            score = minimax(board, depth + 1, alpha, beta, False)
            board[r][c] = ' '
            best_score = max(score, best_score)
            alpha = max(alpha, best_score)
            if beta <= alpha:
                break
        return best_score
    else:
        best_score = float('inf')
        for (r, c) in get_empty_positions(board):
            board[r][c] = 'O'
            score = minimax(board, depth + 1, alpha, beta, True)
            board[r][c] = ' '
            best_score = min(score, best_score)
            beta = min(beta, best_score)
            if beta <= alpha:
                break
        return best_score

def best_move(board):
    best_score = -float('inf')
    move = None
    for (r, c) in get_empty_positions(board):
        board[r][c] = 'X'
        score = minimax(board, 0, -float('inf'), float('inf'), False)
        board[r][c] = ' '
        if score > best_score:
            best_score = score
            move = (r, c)
    return move

def tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print_board(board)
    
    for turn in range(9):
        if turn % 2 == 0:
            move = best_move(board)
            if move:
                row, col = move
                board[row][col] = 'X'
        else:
            row, col = map(int, input("Enter row and column (0, 1, or 2): ").split())
            if board[row][col] != ' ':
                print("Position already taken. Try again.")
                continue
            board[row][col] = 'O'
        
        print_board(board)
        
        winner = check_winner(board)
        if winner:
            print(f"Player {winner} wins!")
            return
    print("It's a tie!")

tic_tac_toe()
