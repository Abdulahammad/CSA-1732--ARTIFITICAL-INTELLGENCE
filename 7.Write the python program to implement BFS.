from collections import deque

def bfs(graph, start):
    visited = set()          # Set to keep track of visited nodes
    queue = deque([start])   # Initialize the queue with the start node

    while queue:
        vertex = queue.popleft()   # Dequeue a vertex from the queue
        if vertex not in visited:
            print(vertex, end=" ") # Process the vertex (here we simply print it)
            visited.add(vertex)    # Mark the vertex as visited
            # Enqueue non-visited adjacent vertices
            queue.extend(neighbor for neighbor in graph[vertex] if neighbor not in visited)

# Example usage:
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

bfs(graph, 'A')  # Output: A B C D E F
